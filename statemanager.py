import pygamefrom pygame.locals import *from main_menu import MainMenufrom settings_menu import SettingsMenufrom gamestates import statesfrom game import *from Defs import *from setscore import *from highscores import *from about import *class StateManager(object):    instance = None    def __new__(cls, *args, **kwargs):        if not cls.instance:            cls.instance = super(StateManager, cls).__new__(cls, *args, **kwargs)        return cls.instance    def __init__(self, res, screen):        self.defs = Defs()        self.res = res        self.screen = screen        self.currentState = states['STATE_MENU']        self.w, self.h = res        self.scr = screen        self.gameMenu = MainMenu(res, screen)        self.gameSettings = SettingsMenu(res, screen)        self.theGame = Game(res, screen)        self.theScore = SetScore(res, screen)        self.highScores = HighScores(res, screen)        self.theAbout = About(res, screen)        self.lastScore = 0        self.finish = False        self.endgame = False        self.gameSpeedLevel = 1        self.gameSpeed = 1    def beginGame(self):        self.endGame = False    def setState(self, state):        print("setting state~")        self.currentState = states[state]    def getState(self):        return self.currentState    def setSpeed(self, speed):        self.gameSpeedLevel = speed    def getSpeed(self):        return self.gameSpeedLevel    def DrawAndUpdate(self, frameDeltaTime):        if self.theGame.endgame == True:            self.setState('STATE_SETSCORE')            self.lastScore = self.theGame.score            del self.theGame            self.theGame = Game(self.res, self.screen)        if self.currentState == states['STATE_MENU']:           self.gameMenu.Draw()           self.gameMenu.Update(frameDeltaTime)        elif self.currentState == states['STATE_SETTINGS']:           # print("settings~")            blabla = 0           # self.gameSettings.Draw()           # self.gameSettings.Update(frameDeltaTime)        elif self.currentState == states['STATE_GAME']:           # print("game~")            self.theGame.Run()            self.theGame.Update(frameDeltaTime)        elif self.currentState == states['STATE_SETSCORE'] and not self.theScore.scoreSet:           self.theScore.setScore(self.lastScore)           self.theScore.Draw()           self.theScore.Update(frameDeltaTime)        elif self.theScore.scoreSet:            self.setState('STATE_DONE')            del self.theScore            self.theScore = SetScore(self.res, self.screen)        elif self.currentState == states['STATE_DONE']:           self.gameMenu.Draw()           self.gameMenu.Update(frameDeltaTime)        elif self.currentState == states['STATE_HIGHSCORES'] and not self.highScores.scoreBack:            self.highScores.Draw()            self.highScores.Update(frameDeltaTime)        elif self.currentState == states['STATE_ABOUT'] and not self.theAbout.aboutBack:            self.theAbout.Draw()            self.theAbout.Update(frameDeltaTime)        elif self.theAbout.aboutBack:            del self.theAbout            self.theAbout = About(self.res, self.screen)            self.setState('STATE_DONE')        elif self.highScores.scoreBack:            del self.highScores            self.highScores = HighScores(self.res, self.screen)            self.setState('STATE_DONE')        for event in pygame.event.get():            if event.type == pygame.QUIT:                self.finish = True    def Run(self):        then = pygame.time.get_ticks()        print("running~")        while not self.finish:            clock = pygame.time.Clock()            now = pygame.time.get_ticks()            frameDeltaTime = int((now - then) / self.gameSpeed)            then = now            cap = "Gotetris " #+ str(self.gameProcess.testpos.x) + " " + str(self.gameProcess.testpos.y)            pygame.display.set_caption(cap)            self.scr.fill((0, 0, 0))            self.DrawAndUpdate(frameDeltaTime)            pygame.display.update()            clock.tick(self.defs.maxfps)        pygame.quit()